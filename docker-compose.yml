version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: client_monitor_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_DB: ${POSTGRES_DB:-client_intelligence}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: client_monitor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API (optional - for production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: client_monitor_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-client_intelligence}
      REDIS_URL: redis://redis:6379/0
      DEBUG: "True"
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - full

  # Frontend (optional - for production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: client_monitor_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_BASE_URL: http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - full

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: client_monitor_network
