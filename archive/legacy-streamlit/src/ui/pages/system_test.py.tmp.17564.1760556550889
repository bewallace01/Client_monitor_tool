"""System testing and diagnostics page."""

import streamlit as st
from datetime import datetime
import psutil
import os
from typing import Dict, List, Tuple

from src.storage import SQLiteStorage
from src.models.client_dto import ClientDTO
from src.models.event_dto import EventDTO
from src.collectors.factory import get_collector, list_available_collectors, get_active_collector_info
from src.classifier import classify_event
from src.scorer import calculate_relevance_score
from src.scheduler.control import is_scheduler_running


def check_database_connection() -> Tuple[bool, str]:
    """Check database connection and basic operations."""
    try:
        storage = SQLiteStorage()
        storage.connect()

        # Try a simple query
        stats = storage.get_statistics()

        return True, f"✅ Connected - {stats.get('total_clients', 0)} clients, {stats.get('total_events', 0)} events"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def check_collectors() -> Tuple[bool, str, Dict]:
    """Check available collectors and their status."""
    try:
        collectors = list_available_collectors()
        active_info = get_active_collector_info()

        configured_count = sum(1 for c in collectors.values() if c.get('configured', False))
        total_count = len(collectors)

        status_msg = f"✅ {configured_count}/{total_count} collectors configured"
        if active_info['is_mock']:
            status_msg += " (Using Mock)"
        else:
            status_msg += f" (Using {active_info['type']})"

        return True, status_msg, collectors
    except Exception as e:
        return False, f"❌ Error: {str(e)}", {}


def check_scheduler() -> Tuple[bool, str]:
    """Check scheduler status."""
    try:
        is_running = is_scheduler_running()
        if is_running:
            return True, "✅ Scheduler is running"
        else:
            return False, "⚠️ Scheduler is stopped"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def check_disk_space() -> Tuple[bool, str]:
    """Check available disk space."""
    try:
        disk = psutil.disk_usage('.')
        free_gb = disk.free / (1024 ** 3)
        percent_free = 100 - disk.percent

        if percent_free < 10:
            return False, f"⚠️ Low disk space: {free_gb:.2f} GB free ({percent_free:.1f}%)"
        else:
            return True, f"✅ Disk space: {free_gb:.2f} GB free ({percent_free:.1f}%)"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def test_database_operations() -> Dict[str, Tuple[bool, str]]:
    """Test database CRUD operations."""
    results = {}
    storage = SQLiteStorage()

    try:
        storage.connect()
        results["Connect"] = (True, "✅ Connection successful")
    except Exception as e:
        results["Connect"] = (False, f"❌ {str(e)}")
        return results

    # Test client operations
    test_client_id = f"test_client_{datetime.now().timestamp()}"
    try:
        test_client = ClientDTO(
            id=test_client_id,
            name="Test Company",
            industry="Technology",
            website="https://test.com",
            description="Test client for system check"
        )
        storage.create_client(test_client)
        results["Create Client"] = (True, "✅ Client created")
    except Exception as e:
        results["Create Client"] = (False, f"❌ {str(e)}")

    try:
        client = storage.get_client(test_client_id)
        if client and client.name == "Test Company":
            results["Read Client"] = (True, "✅ Client read successfully")
        else:
            results["Read Client"] = (False, "❌ Client data mismatch")
    except Exception as e:
        results["Read Client"] = (False, f"❌ {str(e)}")

    try:
        storage.update_client(test_client_id, {"description": "Updated description"})
        updated_client = storage.get_client(test_client_id)
        if updated_client and updated_client.description == "Updated description":
            results["Update Client"] = (True, "✅ Client updated successfully")
        else:
            results["Update Client"] = (False, "❌ Update failed")
    except Exception as e:
        results["Update Client"] = (False, f"❌ {str(e)}")

    try:
        storage.delete_client(test_client_id)
        deleted_client = storage.get_client(test_client_id)
        if deleted_client is None:
            results["Delete Client"] = (True, "✅ Client deleted successfully")
        else:
            results["Delete Client"] = (False, "❌ Delete failed")
    except Exception as e:
        results["Delete Client"] = (False, f"❌ {str(e)}")

    return results


def test_mock_collector() -> Dict[str, Tuple[bool, str]]:
    """Test mock collector functionality."""
    results = {}

    try:
        from src.collectors.mock import MockCollector
        collector = MockCollector()
        results["Initialize"] = (True, "✅ Collector initialized")
    except Exception as e:
        results["Initialize"] = (False, f"❌ {str(e)}")
        return results

    try:
        test_client = ClientDTO(
            id="test_client",
            name="Test Company",
            industry="Technology",
            website="https://test.com"
        )
        events = collector.collect_events(test_client, lookback_days=7, max_results=5)

        if len(events) > 0:
            results["Collect Events"] = (True, f"✅ Collected {len(events)} events")
        else:
            results["Collect Events"] = (False, "❌ No events collected")
    except Exception as e:
        results["Collect Events"] = (False, f"❌ {str(e)}")

    try:
        if len(events) > 0:
            event = events[0]
            if all([event.id, event.title, event.client_id]):
                results["Event Structure"] = (True, "✅ Event structure valid")
            else:
                results["Event Structure"] = (False, "❌ Missing required fields")
    except Exception as e:
        results["Event Structure"] = (False, f"❌ {str(e)}")

    return results


def test_real_api() -> Dict[str, Tuple[bool, str]]:
    """Test real API collector if configured."""
    results = {}

    try:
        collector = get_collector()
        collector_type = type(collector).__name__

        from src.collectors.mock import MockCollector
        if isinstance(collector, MockCollector):
            results["API Status"] = (False, "⚠️ No real API configured (using mock)")
            return results

        results["API Status"] = (True, f"✅ Using {collector_type}")
    except Exception as e:
        results["API Status"] = (False, f"❌ {str(e)}")
        return results

    try:
        if hasattr(collector, 'is_configured'):
            if collector.is_configured():
                results["Configuration"] = (True, "✅ API credentials configured")
            else:
                results["Configuration"] = (False, "❌ API credentials not configured")
        else:
            results["Configuration"] = (True, "✅ No configuration required")
    except Exception as e:
        results["Configuration"] = (False, f"❌ {str(e)}")

    try:
        if hasattr(collector, 'get_rate_limit_status'):
            rate_status = collector.get_rate_limit_status()
            remaining = rate_status.get('remaining_calls', 0)
            max_calls = rate_status.get('max_calls', 0)
            results["Rate Limit"] = (True, f"✅ {remaining}/{max_calls} calls remaining")
        else:
            results["Rate Limit"] = (True, "✅ No rate limit")
    except Exception as e:
        results["Rate Limit"] = (False, f"❌ {str(e)}")

    # Test actual collection
    try:
        test_client = ClientDTO(
            id="test_client",
            name="Microsoft",
            industry="Technology",
            website="https://microsoft.com"
        )
        events = collector.collect_events(test_client, lookback_days=7, max_results=3)

        if len(events) > 0:
            results["API Call"] = (True, f"✅ Collected {len(events)} events")
        else:
            results["API Call"] = (False, "⚠️ No events returned (may be normal)")
    except Exception as e:
        results["API Call"] = (False, f"❌ {str(e)}")

    return results


def test_classifier() -> Dict[str, Tuple[bool, str]]:
    """Test event classifier."""
    results = {}

    test_cases = [
        ("Company raises $50M Series B funding round", "funding"),
        ("Tech giant acquires startup for $100M", "acquisition"),
        ("New CEO appointed to lead growth strategy", "leadership"),
        ("Startup launches revolutionary AI product", "product"),
    ]

    for text, expected_type in test_cases:
        try:
            classified_type = classify_event(text, "")
            if classified_type == expected_type:
                results[f"Classify '{expected_type}'"] = (True, f"✅ Correct: {classified_type}")
            else:
                results[f"Classify '{expected_type}'"] = (False, f"❌ Got {classified_type}, expected {expected_type}")
        except Exception as e:
            results[f"Classify '{expected_type}'"] = (False, f"❌ {str(e)}")

    return results


def test_scorer() -> Dict[str, Tuple[bool, str]]:
    """Test relevance scorer."""
    results = {}

    test_client = ClientDTO(
        id="test",
        name="Acme Corp",
        industry="Technology"
    )

    test_cases = [
        ("Acme Corp announces major partnership", 0.7, "High relevance"),
        ("Technology sector sees growth", 0.4, "Medium relevance"),
        ("Random unrelated news", 0.2, "Low relevance"),
    ]

    for text, min_expected, label in test_cases:
        try:
            score = calculate_relevance_score(text, "", test_client.name)
            if score >= min_expected:
                results[label] = (True, f"✅ Score: {score:.2f}")
            else:
                results[label] = (False, f"❌ Score too low: {score:.2f}")
        except Exception as e:
            results[label] = (False, f"❌ {str(e)}")

    return results


def generate_sample_clients(count: int) -> Tuple[bool, str]:
    """Generate sample clients."""
    try:
        storage = SQLiteStorage()
        storage.connect()

        sample_companies = [
            ("Acme Corporation", "Technology", "https://acme.com", "Leading software provider"),
            ("GlobalTech Solutions", "Technology", "https://globaltech.com", "Enterprise IT services"),
            ("InnovateCo", "Healthcare", "https://innovateco.com", "Healthcare technology"),
            ("FinanceFirst", "Finance", "https://financefirst.com", "Financial services"),
            ("RetailKing", "Retail", "https://retailking.com", "E-commerce platform"),
            ("DataDrive", "Technology", "https://datadrive.com", "Data analytics platform"),
            ("CloudNine", "Technology", "https://cloudnine.com", "Cloud infrastructure"),
            ("SecureNet", "Cybersecurity", "https://securenet.com", "Security solutions"),
            ("GreenEnergy", "Energy", "https://greenenergy.com", "Renewable energy"),
            ("HealthPlus", "Healthcare", "https://healthplus.com", "Medical devices"),
        ]

        created = 0
        for i in range(min(count, len(sample_companies))):
            name, industry, website, desc = sample_companies[i]
            client_id = f"sample_{name.lower().replace(' ', '_')}_{datetime.now().timestamp()}"

            client = ClientDTO(
                id=client_id,
                name=name,
                industry=industry,
                website=website,
                description=desc,
                is_active=True
            )

            storage.create_client(client)
            created += 1

        return True, f"✅ Created {created} sample clients"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def generate_sample_events(count: int) -> Tuple[bool, str]:
    """Generate sample events."""
    try:
        storage = SQLiteStorage()
        storage.connect()

        # Get existing clients
        clients = storage.get_all_clients()
        if not clients:
            return False, "❌ No clients found. Please create clients first."

        collector = get_collector()
        created = 0

        for client in clients[:min(len(clients), count)]:
            events = collector.collect_events(client, lookback_days=30, max_results=3)
            for event in events:
                storage.create_event(event)
                created += 1

        return True, f"✅ Created {created} sample events"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def clear_sample_data() -> Tuple[bool, str]:
    """Clear all sample data (clients and events starting with 'sample_')."""
    try:
        storage = SQLiteStorage()
        storage.connect()

        # Get all clients
        all_clients = storage.get_all_clients()
        deleted_clients = 0

        for client in all_clients:
            if client.id.startswith('sample_'):
                storage.delete_client(client.id)
                deleted_clients += 1

        # Note: Events will be cascade deleted with clients

        return True, f"✅ Deleted {deleted_clients} sample clients and their events"
    except Exception as e:
        return False, f"❌ Error: {str(e)}"


def render_system_test_page():
    """Main system test page."""
    st.markdown('<h1 class="main-header">🧪 System Testing & Diagnostics</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">Health checks, test suites, and sample data generation</p>', unsafe_allow_html=True)

    # System Health Check
    st.markdown("## 🏥 System Health Check")

    col1, col2 = st.columns(2)

    with col1:
        with st.container(border=True):
            st.markdown("### Core Systems")

            # Database
            db_ok, db_msg = check_database_connection()
            st.markdown(f"**Database:** {db_msg}")

            # Collectors
            collectors_ok, collectors_msg, collectors_info = check_collectors()
            st.markdown(f"**Collectors:** {collectors_msg}")

            # Scheduler
            scheduler_ok, scheduler_msg = check_scheduler()
            st.markdown(f"**Scheduler:** {scheduler_msg}")

    with col2:
        with st.container(border=True):
            st.markdown("### Resources")

            # Disk space
            disk_ok, disk_msg = check_disk_space()
            st.markdown(f"**Disk Space:** {disk_msg}")

            # Memory
            try:
                memory = psutil.virtual_memory()
                memory_used_gb = memory.used / (1024 ** 3)
                memory_total_gb = memory.total / (1024 ** 3)
                st.markdown(f"**Memory:** ✅ {memory_used_gb:.1f}/{memory_total_gb:.1f} GB ({memory.percent}%)")
            except:
                st.markdown("**Memory:** ❌ Unable to check")

            # Database size
            try:
                db_path = "client_monitor.db"
                if os.path.exists(db_path):
                    db_size_mb = os.path.getsize(db_path) / (1024 ** 2)
                    st.markdown(f"**Database Size:** ✅ {db_size_mb:.2f} MB")
                else:
                    st.markdown("**Database Size:** ⚠️ Not found")
            except:
                st.markdown("**Database Size:** ❌ Unable to check")

    st.divider()

    # Test Suite
    st.markdown("## 🧪 Test Suite")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("🗄️ Test Database", use_container_width=True):
            st.session_state.test_db_results = test_database_operations()

    with col2:
        if st.button("🎭 Test Mock Collector", use_container_width=True):
            st.session_state.test_mock_results = test_mock_collector()

    with col3:
        if st.button("🔌 Test Real API", use_container_width=True):
            st.session_state.test_api_results = test_real_api()

    col4, col5 = st.columns(2)

    with col4:
        if st.button("🏷️ Test Classifier", use_container_width=True):
            st.session_state.test_classifier_results = test_classifier()

    with col5:
        if st.button("🎯 Test Scorer", use_container_width=True):
            st.session_state.test_scorer_results = test_scorer()

    # Display test results
    test_results = [
        ("Database Operations", "test_db_results"),
        ("Mock Collector", "test_mock_results"),
        ("Real API", "test_api_results"),
        ("Classifier", "test_classifier_results"),
        ("Scorer", "test_scorer_results"),
    ]

    for title, key in test_results:
        if key in st.session_state:
            with st.expander(f"📋 {title} Results", expanded=True):
                results = st.session_state[key]
                for test_name, (success, message) in results.items():
                    st.markdown(f"**{test_name}:** {message}")

    st.divider()

    # Sample Data Generator
    st.markdown("## 🎲 Sample Data Generator")

    col1, col2 = st.columns(2)

    with col1:
        with st.container(border=True):
            st.markdown("### Generate Sample Data")

            client_count = st.number_input(
                "Number of clients to generate",
                min_value=1,
                max_value=10,
                value=5,
                key="sample_client_count"
            )

            if st.button("➕ Generate Sample Clients", use_container_width=True):
                with st.spinner("Generating sample clients..."):
                    success, msg = generate_sample_clients(client_count)
                    if success:
                        st.success(msg)
                        st.rerun()
                    else:
                        st.error(msg)

            st.divider()

            event_count = st.number_input(
                "Number of clients to generate events for",
                min_value=1,
                max_value=20,
                value=5,
                key="sample_event_count"
            )

            if st.button("📰 Generate Sample Events", use_container_width=True):
                with st.spinner("Generating sample events..."):
                    success, msg = generate_sample_events(event_count)
                    if success:
                        st.success(msg)
                        st.rerun()
                    else:
                        st.error(msg)

    with col2:
        with st.container(border=True):
            st.markdown("### Current Data")

            try:
                storage = SQLiteStorage()
                storage.connect()
                stats = storage.get_statistics()

                st.metric("Total Clients", stats.get('total_clients', 0))
                st.metric("Total Events", stats.get('total_events', 0))
                st.metric("Active Clients", stats.get('active_clients', 0))

                st.divider()

                st.warning("⚠️ This will delete all clients and events that start with 'sample_'")

                if st.button("🗑️ Clear Sample Data", use_container_width=True, type="secondary"):
                    with st.spinner("Clearing sample data..."):
                        success, msg = clear_sample_data()
                        if success:
                            st.success(msg)
                            st.rerun()
                        else:
                            st.error(msg)
            except Exception as e:
                st.error(f"Error loading statistics: {e}")

    st.divider()

    # Collector Details
    st.markdown("## 🔌 Collector Details")

    if collectors_info:
        for name, info in collectors_info.items():
            with st.expander(f"📦 {name.title()} Collector"):
                col1, col2 = st.columns(2)

                with col1:
                    st.markdown(f"**Description:** {info.get('description', 'N/A')}")
                    st.markdown(f"**Requires API Key:** {'Yes' if info.get('requires_api_key') else 'No'}")

                with col2:
                    configured = info.get('configured', False)
                    st.markdown(f"**Configured:** {'✅ Yes' if configured else '❌ No'}")

                    if 'rate_limit' in info:
                        st.markdown(f"**Rate Limit:** {info['rate_limit']}/day")
