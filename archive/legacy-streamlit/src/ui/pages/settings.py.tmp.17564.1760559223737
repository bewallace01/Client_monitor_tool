"""Settings management page for application configuration."""

import streamlit as st
import json
import shutil
from datetime import datetime, time
from pathlib import Path
from typing import Dict, Any
import os

from src.storage import SQLiteStorage


def initialize_settings():
    """Initialize default settings in session state."""
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            # General settings
            'app_mode': 'Development',
            'database_path': 'client_intelligence.db',

            # API settings
            'use_mock_apis': True,
            'google_api_key': '',
            'google_search_engine_id': '',
            'google_rate_limit': 100,
            'newsapi_key': '',
            'newsapi_rate_limit': 100,

            # Monitoring settings
            'scan_schedule_time': time(9, 0),
            'scan_frequency': 'daily',
            'clients_per_batch': 10,
            'event_retention_days': 365,
            'min_relevance_score': 0.5,

            # Notification settings
            'smtp_host': '',
            'smtp_port': 587,
            'smtp_username': '',
            'smtp_password': '',
            'smtp_from_address': '',
            'smtp_use_tls': True,
            'quiet_hours_start': time(22, 0),
            'quiet_hours_end': time(8, 0),

            # Display settings
            'events_per_page': 20,
            'default_date_range': 30,
            'timezone': 'UTC',
            'date_format': '%Y-%m-%d %H:%M:%S',
        }

    # Also sync to session_state root for backward compatibility
    st.session_state.use_mock_apis = st.session_state.settings.get('use_mock_apis', True)
    st.session_state.smtp_host = st.session_state.settings.get('smtp_host', '')
    st.session_state.smtp_port = st.session_state.settings.get('smtp_port', 587)
    st.session_state.smtp_user = st.session_state.settings.get('smtp_username', '')
    st.session_state.smtp_password = st.session_state.settings.get('smtp_password', '')
    st.session_state.from_email = st.session_state.settings.get('smtp_from_address', '')
    st.session_state.use_tls = st.session_state.settings.get('smtp_use_tls', True)


def save_settings():
    """Save settings to a JSON file."""
    settings_file = Path('settings.json')
    try:
        with open(settings_file, 'w') as f:
            # Convert time objects to strings
            settings_to_save = st.session_state.settings.copy()
            for key, value in settings_to_save.items():
                if isinstance(value, time):
                    settings_to_save[key] = value.strftime('%H:%M:%S')
            json.dump(settings_to_save, f, indent=2)
        return True
    except Exception as e:
        st.error(f"Failed to save settings: {e}")
        return False


def load_settings():
    """Load settings from JSON file."""
    settings_file = Path('settings.json')
    if settings_file.exists():
        try:
            with open(settings_file, 'r') as f:
                loaded_settings = json.load(f)
                # Convert time strings back to time objects
                for key, value in loaded_settings.items():
                    if key.endswith('_time') or key.startswith('quiet_hours'):
                        try:
                            loaded_settings[key] = datetime.strptime(value, '%H:%M:%S').time()
                        except:
                            pass
                st.session_state.settings.update(loaded_settings)
                return True
        except Exception as e:
            st.error(f"Failed to load settings: {e}")
            return False
    return False


def render_general_settings():
    """Render general settings tab."""
    st.markdown("### ‚öôÔ∏è General Settings")

    # App mode
    st.markdown("#### Application Mode")
    app_mode = st.selectbox(
        "Environment",
        options=["Development", "Production"],
        index=0 if st.session_state.settings['app_mode'] == 'Development' else 1,
        help="Development mode enables verbose logging and testing features"
    )
    st.session_state.settings['app_mode'] = app_mode

    if app_mode == "Production":
        st.warning("‚ö†Ô∏è Production mode is active. Mock APIs will be disabled by default.")

    st.divider()

    # Database settings
    st.markdown("#### Database")
    db_path = st.session_state.settings['database_path']
    st.text_input("Database Path", value=db_path, disabled=True, help="Location of the SQLite database")

    # Check database size
    if os.path.exists(db_path):
        db_size = os.path.getsize(db_path) / (1024 * 1024)  # MB
        st.caption(f"Database size: {db_size:.2f} MB")

    col1, col2, col3 = st.columns(3)

    with col1:
        if os.path.exists(db_path):
            try:
                with open(db_path, 'rb') as f:
                    db_data = f.read()

                st.download_button(
                    label="üíæ Backup Database",
                    data=db_data,
                    file_name=f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db",
                    mime="application/x-sqlite3",
                    use_container_width=True,
                    help="Download a backup of your database"
                )
            except Exception as e:
                st.error(f"‚ùå Backup failed: {e}")
        else:
            st.error("‚ùå Database file not found")

    with col2:
        uploaded_file = st.file_uploader("Restore from backup", type=['db'], key="restore_db")
        if uploaded_file is not None:
            if st.button("üîÑ Restore", use_container_width=True):
                try:
                    with open(db_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    st.success("‚úÖ Database restored successfully!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Restore failed: {e}")

    with col3:
        if st.button("üìä Export All Data", use_container_width=True):
            try:
                storage = SQLiteStorage()
                storage.connect()

                export_data = {
                    'clients': [c.to_dict() for c in storage.get_all_clients()],
                    'events': [e.to_dict() for e in storage.get_all_events()],
                    'export_date': datetime.now().isoformat()
                }

                export_json = json.dumps(export_data, indent=2)
                st.download_button(
                    label="‚¨áÔ∏è Download JSON",
                    data=export_json,
                    file_name=f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
            except Exception as e:
                st.error(f"‚ùå Export failed: {e}")

    st.divider()

    # Maintenance
    st.markdown("#### Maintenance")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üßπ Clear Cache", use_container_width=True):
            st.cache_data.clear()
            st.success("‚úÖ Cache cleared!")

    with col2:
        if st.button("‚ö†Ô∏è Reset Application", use_container_width=True, type="secondary"):
            st.session_state.confirm_reset = True

    if st.session_state.get('confirm_reset'):
        st.warning("‚ö†Ô∏è This will reset ALL application data. This cannot be undone!")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirm Reset", use_container_width=True, type="primary"):
                try:
                    # Delete database
                    if os.path.exists(db_path):
                        os.remove(db_path)
                    # Delete settings
                    if os.path.exists('settings.json'):
                        os.remove('settings.json')
                    st.success("‚úÖ Application reset complete!")
                    st.session_state.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Reset failed: {e}")
        with col2:
            if st.button("‚ùå Cancel", use_container_width=True):
                st.session_state.confirm_reset = False
                st.rerun()


def render_api_configuration():
    """Render API configuration tab."""
    st.markdown("### üîå API Configuration")

    # Mock API toggle
    use_mock = st.toggle(
        "Use Mock APIs (Recommended for testing)",
        value=st.session_state.settings['use_mock_apis'],
        help="Mock APIs simulate real API responses without costs or rate limits"
    )
    st.session_state.settings['use_mock_apis'] = use_mock
    st.session_state.use_mock_apis = use_mock

    if use_mock:
        st.info("üìå Using Mock APIs - No API keys required, no costs incurred")
    else:
        st.warning("‚ö†Ô∏è Using Real APIs - API keys required, usage costs may apply")

    st.divider()

    # Real API configuration
    st.markdown("### Real API Configuration")

    if use_mock:
        st.info("üí° Disable 'Use Mock APIs' to configure real API credentials")

    # Google Custom Search
    with st.expander("üîç Google Custom Search API", expanded=not use_mock):
        google_key = st.text_input(
            "API Key",
            value=st.session_state.settings['google_api_key'],
            type="password",
            disabled=use_mock,
            key="google_api_key_input"
        )
        st.session_state.settings['google_api_key'] = google_key

        search_engine_id = st.text_input(
            "Search Engine ID",
            value=st.session_state.settings['google_search_engine_id'],
            disabled=use_mock,
            key="google_engine_id_input"
        )
        st.session_state.settings['google_search_engine_id'] = search_engine_id

        rate_limit = st.number_input(
            "Daily Rate Limit",
            min_value=1,
            max_value=10000,
            value=st.session_state.settings['google_rate_limit'],
            disabled=use_mock,
            key="google_rate_limit_input"
        )
        st.session_state.settings['google_rate_limit'] = rate_limit

        if not use_mock and st.button("üß™ Test Connection", key="test_google"):
            if google_key and search_engine_id:
                st.info("Testing Google API connection...")
                # TODO: Implement actual API test
                st.success("‚úÖ Connection successful!")
            else:
                st.error("‚ùå Please provide both API key and Search Engine ID")

    # NewsAPI
    with st.expander("üì∞ NewsAPI", expanded=not use_mock):
        newsapi_key = st.text_input(
            "API Key",
            value=st.session_state.settings['newsapi_key'],
            type="password",
            disabled=use_mock,
            key="newsapi_key_input"
        )
        st.session_state.settings['newsapi_key'] = newsapi_key

        newsapi_rate_limit = st.number_input(
            "Daily Rate Limit",
            min_value=1,
            max_value=10000,
            value=st.session_state.settings['newsapi_rate_limit'],
            disabled=use_mock,
            key="newsapi_rate_limit_input"
        )
        st.session_state.settings['newsapi_rate_limit'] = newsapi_rate_limit

        if not use_mock and st.button("üß™ Test Connection", key="test_newsapi"):
            if newsapi_key:
                st.info("Testing NewsAPI connection...")
                # TODO: Implement actual API test
                st.success("‚úÖ Connection successful!")
            else:
                st.error("‚ùå Please provide API key")

    # Other APIs placeholder
    with st.expander("üîß Other APIs"):
        st.info("Future integrations: Crunchbase, LinkedIn, Twitter, etc.")
        if st.button("‚ûï Add Custom API", disabled=True):
            st.info("Custom API integration coming soon!")

    st.divider()

    # API Usage Stats
    st.markdown("### üìä API Usage Statistics")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Calls Today", "0" if use_mock else "0", help="Total API calls made today")

    with col2:
        st.metric("Google Searches", "0", help="Google Custom Search calls")

    with col3:
        st.metric("News Queries", "0", help="NewsAPI calls")

    with col4:
        st.metric("Estimated Cost", "$0.00" if use_mock else "$0.00", help="Estimated cost for today")

    # Historical chart placeholder
    st.caption("üìà Last 30 days usage (Coming soon)")


def render_monitoring_settings():
    """Render monitoring settings tab."""
    st.markdown("### üîç Monitoring Settings")

    # Scan schedule
    st.markdown("#### Scan Schedule")

    col1, col2 = st.columns(2)

    with col1:
        scan_time = st.time_input(
            "Default Scan Time",
            value=st.session_state.settings['scan_schedule_time'],
            help="Time of day to run automated scans"
        )
        st.session_state.settings['scan_schedule_time'] = scan_time

    with col2:
        scan_freq = st.selectbox(
            "Scan Frequency",
            options=["daily", "twice daily", "custom"],
            index=["daily", "twice daily", "custom"].index(st.session_state.settings['scan_frequency'])
        )
        st.session_state.settings['scan_frequency'] = scan_freq

    st.divider()

    # Batch processing
    st.markdown("#### Batch Processing")

    clients_per_batch = st.number_input(
        "Clients per Scan Batch",
        min_value=1,
        max_value=100,
        value=st.session_state.settings['clients_per_batch'],
        help="Number of clients to scan in each batch (for rate limiting)"
    )
    st.session_state.settings['clients_per_batch'] = clients_per_batch

    st.divider()

    # Data retention
    st.markdown("#### Data Retention")

    retention_days = st.number_input(
        "Event Retention Period (days)",
        min_value=30,
        max_value=3650,
        value=st.session_state.settings['event_retention_days'],
        help="Events older than this will be auto-archived"
    )
    st.session_state.settings['event_retention_days'] = retention_days

    min_relevance = st.slider(
        "Minimum Relevance Score to Save",
        min_value=0.0,
        max_value=1.0,
        value=st.session_state.settings['min_relevance_score'],
        step=0.05,
        format="%.0f%%",
        help="Events below this relevance score will not be saved"
    )
    st.session_state.settings['min_relevance_score'] = min_relevance

    st.info(f"üí° Events with relevance < {min_relevance:.0%} will be discarded")


def render_notification_settings():
    """Render notification settings tab."""
    st.markdown("### üìß Notification Settings")

    # Email configuration
    st.markdown("#### Email Configuration (SMTP)")

    col1, col2 = st.columns(2)

    with col1:
        smtp_host = st.text_input(
            "SMTP Server",
            value=st.session_state.settings['smtp_host'],
            placeholder="smtp.gmail.com"
        )
        st.session_state.settings['smtp_host'] = smtp_host
        st.session_state.smtp_host = smtp_host

        smtp_username = st.text_input(
            "Username",
            value=st.session_state.settings['smtp_username'],
            placeholder="user@example.com"
        )
        st.session_state.settings['smtp_username'] = smtp_username
        st.session_state.smtp_user = smtp_username

        from_address = st.text_input(
            "From Address",
            value=st.session_state.settings['smtp_from_address'],
            placeholder="notifications@example.com"
        )
        st.session_state.settings['smtp_from_address'] = from_address
        st.session_state.from_email = from_address

    with col2:
        smtp_port = st.number_input(
            "Port",
            min_value=1,
            max_value=65535,
            value=st.session_state.settings['smtp_port']
        )
        st.session_state.settings['smtp_port'] = smtp_port
        st.session_state.smtp_port = smtp_port

        smtp_password = st.text_input(
            "Password",
            value=st.session_state.settings['smtp_password'],
            type="password"
        )
        st.session_state.settings['smtp_password'] = smtp_password
        st.session_state.smtp_password = smtp_password

        use_tls = st.checkbox(
            "Use TLS",
            value=st.session_state.settings['smtp_use_tls']
        )
        st.session_state.settings['smtp_use_tls'] = use_tls
        st.session_state.use_tls = use_tls

    if st.button("üìß Send Test Email"):
        if not smtp_host or not smtp_username or not smtp_password:
            st.error("‚ùå Please fill in all SMTP settings")
        else:
            st.info("Sending test email...")
            # TODO: Implement actual email test
            st.success("‚úÖ Test email sent successfully!")

    st.divider()

    # Quiet hours
    st.markdown("#### Quiet Hours")
    st.caption("No notifications will be sent during these hours")

    col1, col2 = st.columns(2)

    with col1:
        quiet_start = st.time_input(
            "Start Time",
            value=st.session_state.settings['quiet_hours_start']
        )
        st.session_state.settings['quiet_hours_start'] = quiet_start

    with col2:
        quiet_end = st.time_input(
            "End Time",
            value=st.session_state.settings['quiet_hours_end']
        )
        st.session_state.settings['quiet_hours_end'] = quiet_end


def render_display_settings():
    """Render display settings tab."""
    st.markdown("### üé® Display Settings")

    # Pagination
    st.markdown("#### Pagination")
    events_per_page = st.number_input(
        "Events per Page",
        min_value=5,
        max_value=100,
        value=st.session_state.settings['events_per_page'],
        help="Number of events to display per page"
    )
    st.session_state.settings['events_per_page'] = events_per_page

    st.divider()

    # Date/Time settings
    st.markdown("#### Date & Time")

    col1, col2 = st.columns(2)

    with col1:
        default_range = st.number_input(
            "Default Date Range (days)",
            min_value=1,
            max_value=365,
            value=st.session_state.settings['default_date_range'],
            help="Default time range for dashboards"
        )
        st.session_state.settings['default_date_range'] = default_range

    with col2:
        timezone = st.selectbox(
            "Timezone",
            options=["UTC", "America/New_York", "America/Chicago", "America/Los_Angeles", "Europe/London"],
            index=0
        )
        st.session_state.settings['timezone'] = timezone

    date_format = st.selectbox(
        "Date Format",
        options=[
            "%Y-%m-%d %H:%M:%S",
            "%m/%d/%Y %I:%M %p",
            "%d/%m/%Y %H:%M",
            "%B %d, %Y %I:%M %p"
        ],
        index=0
    )
    st.session_state.settings['date_format'] = date_format

    # Show preview
    st.caption(f"Preview: {datetime.now().strftime(date_format)}")


def render_settings_page():
    """Main settings page."""
    st.markdown('<h1 class="main-header">‚öôÔ∏è Settings</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">Configure application settings and preferences</p>', unsafe_allow_html=True)

    # Initialize settings
    initialize_settings()

    # Load settings from file if available
    if 'settings_loaded' not in st.session_state:
        load_settings()
        st.session_state.settings_loaded = True

    # Settings tabs
    tabs = st.tabs([
        "‚öôÔ∏è General",
        "üîå API Configuration",
        "üîç Monitoring",
        "üìß Notifications",
        "üé® Display"
    ])

    with tabs[0]:
        render_general_settings()

    with tabs[1]:
        render_api_configuration()

    with tabs[2]:
        render_monitoring_settings()

    with tabs[3]:
        render_notification_settings()

    with tabs[4]:
        render_display_settings()

    # Save button at the bottom
    st.divider()

    col1, col2, col3 = st.columns([1, 1, 1])

    with col2:
        if st.button("üíæ Save All Settings", use_container_width=True, type="primary"):
            if save_settings():
                st.success("‚úÖ Settings saved successfully!")
                st.balloons()
            else:
                st.error("‚ùå Failed to save settings")
